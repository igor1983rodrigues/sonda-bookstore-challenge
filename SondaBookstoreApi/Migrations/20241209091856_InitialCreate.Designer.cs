// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SondaBookstoreApi.Model;

#nullable disable

namespace SondaBookstoreApi.Migrations
{
    [DbContext(typeof(SondaBookstoreContext))]
    [Migration("20241209091856_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CodAu");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("AUTOR");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Codl");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Edition")
                        .HasColumnType("integer")
                        .HasColumnName("Edicao");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Editora");

                    b.Property<int>("PublishingYear")
                        .HasMaxLength(4)
                        .HasColumnType("integer")
                        .HasColumnName("AnoPublicacao");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.ToTable("Livro");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.BookAuthor", b =>
                {
                    b.Property<int>("IdBook")
                        .HasColumnType("integer")
                        .HasColumnName("Livro_Codl");

                    b.Property<int>("IdAuthor")
                        .HasColumnType("integer")
                        .HasColumnName("Autor_CodAu");

                    b.Property<int>("Autor_CodAu_FK")
                        .HasColumnType("integer");

                    b.Property<int>("Livro_Codl_FK")
                        .HasColumnType("integer");

                    b.HasKey("IdBook", "IdAuthor");

                    b.HasIndex("IdAuthor");

                    b.ToTable("Livro_Autor");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.BookSubject", b =>
                {
                    b.Property<int>("IdBook")
                        .HasColumnType("integer")
                        .HasColumnName("Livro_Codl");

                    b.Property<int>("IdSubject")
                        .HasColumnType("integer")
                        .HasColumnName("Autor_CodAu");

                    b.HasKey("IdBook", "IdSubject");

                    b.HasIndex("IdSubject");

                    b.ToTable("BookSubjects");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("codAs");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Assunto");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.BookAuthor", b =>
                {
                    b.HasOne("SondaBookstoreApi.Model.Entity.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("IdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SondaBookstoreApi.Model.Entity.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.BookSubject", b =>
                {
                    b.HasOne("SondaBookstoreApi.Model.Entity.Book", "Book")
                        .WithMany("BookSubjects")
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SondaBookstoreApi.Model.Entity.Subject", "Subject")
                        .WithMany("BookSubjects")
                        .HasForeignKey("IdSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookSubjects");
                });

            modelBuilder.Entity("SondaBookstoreApi.Model.Entity.Subject", b =>
                {
                    b.Navigation("BookSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
